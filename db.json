[{"model": "basics.category", "pk": 1, "fields": {"name": "the-basics", "friendly_name": "The Basics"}}, {"model": "basics.category", "pk": 2, "fields": {"name": "strings", "friendly_name": "Strings"}}, {"model": "basics.article", "pk": 1, "fields": {"name": "An Introduction To JavaScript", "summary": "What is JavaScript? What does it do?", "description": "<p>This is what <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript\" target=\"_blank\" rel=\"noopener\">MDN Web Docs</a> says about what JavaScript is:</p>\r\n<blockquote>\r\n<p>\"JavaScript is a scripting or programming language that allows you to implement complex features on web pages &mdash; every time a web page does more than just sit there and display static information for you to look at &mdash; displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. &mdash; you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies:<br /><br /><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/HTML\">HTML</a>&nbsp;is the markup language that we use to structure and give meaning to our web content, for example defining paragraphs, headings, and data tables, or embedding images and videos in the page.<br /><br /><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSS\">CSS</a>&nbsp;is a language of style rules that we use to apply styling to our HTML content, for example setting background colors and fonts, and laying out our content in multiple columns.<br /><br /><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/JavaScript\">JavaScript</a> is a scripting language that enables you to create dynamically updating content, control multimedia, animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)\"</p>\r\n</blockquote>\r\n<p>So, what does this mean?</p>\r\n<p>It means that when things are moving on the screen, then JavaScript is probably doing the heavy lifting. The banner above, announcing the site title and page you are on, is an example of JavaScript. You can see the code that created it <a href=\"../../../#codepen-playground\" aria-invalid=\"true\">here</a>.</p>\r\n<p>Also, for example, when you're playing a game, as you watch your score increase, this is also probably being done by JavaScript.</p>\r\n<p>In the Console Playground below, run the script by pressing the green button. You'll see that you are affecting change: a pop up appears and asks you a question. When you click \"ok\", you'll get the output in the console itself.</p>\r\n<p><em>printToConsole (console.log) Example</em></p>\r\n<p><iframe id=\"yourjsconsole\" class=\"mb-3\" title=\"yourjsconsole\" src=\"https://www.yourjs.com/console/?code=let+userName+%3D+prompt%28%22What+is+your+name%3F%22%29%3B%0A%0Afunction+printToConsole%28userName%29+%7B%0A++++if+%28userName+%26%26+userName.length%29+%7B%0A++++++++console.log%28userName%29%3B%0A++++++++return%3B%0A++++%7D+else+%7B%0A++++++++console.log%28%27The+prompt+was+left+empty.%27%29%3B%0A++++++++return+false%3B%0A++++%7D%0A%7D%0A%0AprintToConsole%28userName%29%3B&amp;dontRunLastBreak=1\"></iframe></p>\r\n<p>This is all very good, but it's not affecting any change on THIS web page.</p>\r\n<p>The console, then, can be seen as somewhere to test your code, to try it out before actually running the code live.</p>\r\n<p>So, does this mean that JavaScript is a front-end or a back-end language? Well, it can be both. We can run JavaScript to collect data, for example: this would be a back-end use. Or we can run JavaScript to affect the page itself, which would be front-end.</p>\r\n<p>Running it front-end means we need to understand the DOM: the Document Object Model. We'll come to that later.&nbsp;</p>\r\n<p>But for now, let's actually run some code front end. It's the same as the code in the playground above, but rewritten to tell the code to run in the browser.</p>\r\n<p class=\"script-title\"><em>printToPage&nbsp;Example</em></p>\r\n<p><button id=\"printToPage\" class=\"btn btn-primary\">Print To Page</button></p>\r\n<p id=\"result\"></p>\r\n<p id=\"display-gist-here\"></p>", "script_title_1": null, "script_1": null, "gist_title_1": null, "gist_1": null, "codepen_title_1": null, "codepen_data_slug_hash_1": null, "date_added": "2021-11-04T10:49:07.407Z", "category": [1]}}, {"model": "basics.article", "pk": 2, "fields": {"name": "Typography & Syntax", "summary": "How to read the JavaScript code written here.", "description": "<p>On the last page there was a big code block, and for the beginner, the code looked complicated. Complicated both to read, and understand.</p>\r\n<p>So, before we go anywhere else, let's talk about how to <em>read</em> JavaScript: it's only through reading it that you understand it!</p>\r\n<p>Take the following piece of code:</p>\r\n<p class=\"mb-0\"><code>let output = \"This is the text that will be printed\";</code></p>\r\n<p><code>console.log(output);</code></p>\r\n<p>On line 1, we are declaring a variable, and assigning the variable with a value. Variables can be declared as either of these: <code>var</code>, <code>let</code> or <code>const</code></p>\r\n<p>Thus, we declared the variable using the keyword <code>let</code>, and named it \"output\".</p>\r\n<p>On line 2, we told the <code>console</code> what to do with that variable. In this case, we told the <code>console</code> to <code>log</code> (or print) the contents of the variable, or its output.</p>\r\n<p>We could write this, in English, as:</p>\r\n<p><code>console.do(this)</code></p>\r\n<p>We shall see this methodology being used all over this site, and in each of the Reference pages, there will be an explanation of the syntax being used.</p>\r\n<p>On the previous page, we used a function, and these will be discussed in more detail in their own section. Essentially, they are their own self-contained code blocks and except for self-declaring functions, they will not run until they are called, which is what we did on line 52, using the following code:</p>\r\n<p><code>printToPage(userName)</code></p>\r\n<p>Just like the <code>console.log</code> example above, we could write this in English as:</p>\r\n<p><code>whatToDo(whatToDoItTo)</code></p>\r\n<p>You'll notice that we are writing these function names in a certain way, using <code>camelCase</code>. This is JavaScript best practice, and it allows us to differentiate between different languages (HTML and CSS would like <code>print-to-page</code>, while Python likes <code>print_to_page</code>)&nbsp;</p>\r\n<p>Also, on the previous page, an explanation was given for most lines of code. These lines of explanation were all preceeded by <code>//</code></p>\r\n<p>These are comments, and there are two types of comment in JavaScript: the single-line comment, and the multi-line comment:</p>\r\n<p><code>// This is how we write a single-line comment</code></p>\r\n<p class=\"mb-0\"><code>/* This is how we write a multi-line comment.</code></p>\r\n<p><code>It is a comment that is either too long for a single-line, or is best split up into multiple sentences */</code></p>\r\n<p>So, let's move on. Or&nbsp;to put it another way:</p>\r\n<p><code>goTo(nextArticle)</code></p>", "script_title_1": null, "script_1": null, "gist_title_1": null, "gist_1": null, "codepen_title_1": null, "codepen_data_slug_hash_1": null, "date_added": "2021-11-04T15:01:27.148Z", "category": [1]}}, {"model": "basics.article", "pk": 3, "fields": {"name": "Adding JavaScript to a Web Site", "summary": "Internal and External JavaScript: what are the differences?", "description": "<div>\r\n<div>&lt;script async src=\"<a href=\"https://cpwebassets.codepen.io/assets/embed/ei.js\">https://cpwebassets.codepen.io/assets/embed/ei.js</a>\"&gt;&lt;/script&gt;</div>\r\n</div>", "script_title_1": null, "script_1": null, "gist_title_1": null, "gist_1": null, "codepen_title_1": null, "codepen_data_slug_hash_1": "OJjRYxX", "date_added": "2021-11-05T09:41:34.401Z", "category": [1]}}]